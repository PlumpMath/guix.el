;;; helper.scm --- Set load-path and load Scheme side code

;; Copyright © 2014 Alex Kost <alezost@gmail.com>

;; This file is part of Emacs-Guix.

;; Emacs-Guix is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; Emacs-Guix is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with Emacs-Guix.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This is an auxiliary file used to add Guix and Emacs-Guix directories
;; to load-path variables and to load the main code.

;;; Code:

(use-modules (ice-9 regex)
             (srfi srfi-26))

(define %guix-dir)

;; The code is taken from ‘guix’ executable script
(define (set-paths!)
  (define-syntax-rule (push! elt v) (set! v (cons elt v)))

  (define config-lookup
    (let ((config '(("prefix"         . "@prefix@")
                    ("guilemoduledir" . "@guilemoduledir@")))
          (var-ref-regexp (make-regexp "\\$\\{([a-z]+)\\}")))
      (define (expand-var-ref match)
        (lookup (match:substring match 1)))
      (define (expand str)
        (regexp-substitute/global #f var-ref-regexp str
                                  'pre expand-var-ref 'post))
      (define (lookup name)
        (expand (assoc-ref config name)))
      lookup))

  (let ((module-dir (config-lookup "guilemoduledir"))
        (updates-dir (and=> (or (getenv "XDG_CONFIG_HOME")
                                (and=> (getenv "HOME")
                                       (cut string-append <> "/.config")))
                            (cut string-append <> "/guix/latest"))))
    (push! module-dir %load-path)
    (push! module-dir %load-compiled-path)
    (if (and updates-dir (file-exists? updates-dir))
        (begin
          (set! %guix-dir updates-dir)
          (push! updates-dir %load-path)
          (push! updates-dir %load-compiled-path))
        (set! %guix-dir module-dir))))

(set-paths!)

(load-from-path "main")

;;; helper.scm ends here
