* About

*guix.el* provides Emacs interface for [[http://www.gnu.org/software/guix/][Guix package manager]].

Well, actually that's not true yet, because this package is under
developement.  Currently it is possible to search for packages and to
display information about the packages.

* Requirements

- Guix;
- Emacs 24.3 or above;
- [[https://github.com/jaor/geiser][Geiser]] as this package use it for interacting with guile process.

* Installation

** Automatic

If you use [[https://github.com/quelpa/quelpa][Quelpa]], you can install the package like this:

#+BEGIN_SRC emacs-lisp
(quelpa '(guix :fetcher github :repo "alezost/guix.el" :files ("*.el" "*.scm")))
#+END_SRC

** Manual

For the manual installation, clone the repo, add the directory to the
=load-path= and add some autoloads for the interactive commands:

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/path/to/guix-dir")
(autoload 'guix-search-by-name "guix" nil t)
(autoload 'guix-search-by-regexp "guix" nil t)
(autoload 'guix-installed-packages "guix" nil t)
(autoload 'guix-obsolete-packages "guix" nil t)
(autoload 'guix-all-available-packages "guix" nil t)
(autoload 'guix-newest-available-packages "guix" nil t)
#+END_SRC

* Usage

/Note:/ The first start of Guix REPL may take a long time, so be patient
and do not press =C-g=. If you want to disable auto-compilation, use the
following setting:

#+BEGIN_SRC emacs-lisp
(setq guix-guile-program '("guile" "--no-auto-compile"))
#+END_SRC

- To list packages, use the following commands:

  : M-x guix-all-available-packages
  : M-x guix-newest-available-packages
  : M-x guix-installed-packages
  : M-x guix-obsolete-packages

- To search for packages, use:

  : M-x guix-search-by-regexp

  By default "name", "synopsis" and "description" of the packages will
  be searched.  This behavior can be changed with =guix-search-params=
  variable.

- To get packages by name, use:

  : M-x guix-search-by-name

Information about the packages may be displayed in 2 types of buffers:
"_list_" and "_info_".  The following keys are available in the both
buffer types by default:

- =l= / =r= – go backward/forward by the history of the displayed
  results (this history is similar to the history of the Emacs =help= or
  =Info= modes);
- =g= – refresh current information;
- =C-c C-z= – go to the Guix REPL;
- =h= or =?= – describe current mode to see all available bindings.

Also you can press =RET= in the list buffer to get more information
about the package.

"Info" buffer contains some buttons (as usual you may use =TAB= /
=S-TAB= to move between buttons) which can be used to:

- jump to a package location;
- browse home page of the package;
- describe packages from "Inputs" and "Native inputs" fields.

/Hint:/ If you need several "list" or "info" buffers, you can simlpy
=M-x clone-buffer= them, and each buffer will have its own history.

/Warning:/ Name/version pairs cannot be used to identify Guix packages
(because a name is not necessarily unique), so =guix.el= uses special
identifiers that live only during a guile session, so if the Guix REPL
was restarted, you may want to revert "list" buffer (by pressing =g=).
